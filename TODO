TODO:
  11/24
  points are stored as an array of pointers to double[2]'s, not contiguously
    maybe fix by using real_2d_array: alglib matrix that is contiguous

  look up compiler directives: you can tell the compiler that some data 
    data structure will not change for the duration of a function. this will be
    useful for calls to MPNParams structures, they rarely ever change

  MPN2D::incrementalCost: (Mark)
	good canidate for loop unrolling
	params->costWeights is accessed in an inner loop but never changes
	multiplication of params->costWeights could be moved outside loop
	extraCost is rarely ever used: maybe overload incremental cost?

  MPN2D::nominalPath:
	check for end condition doesn't need to happen at every point
		
  MPN2D::samplePath: (Casey)
	check for end condition doesn't need to happen at every point (Mark)
	find out if there is a cheaper way to rotate vectors

  Environment: (Casey)
	the functions in this class get called A LOT, esp. negatedGradient
	many functions call obstacles.size() in the for-loop declaration
	obstacles.size() never changes, neither do the positions of obstacles
	calculateBeta0 calculates pow(radius,2), but this value never changes	
  
  make gamma a macro-function
  
  look up compiler flags to take full advantage of processor's features

DONE:
  11/24
  added macro definition for 2D gamma that eliminates for-loop
  move exception for the first point outside the loop (samplePath)
  moved code from anglePerturb into samplePath: that is the only function that 
    calls it  

  11/27
  altered the data structure for storing the grid values from an array of 
  pointers to doubles to a single array of doubles storing the values as
  x1,y1,x2,y2...  I also had to update a couple loops and access functions so
  that the correct values were passed in.  It compiles an runs with some
  improvement under time_trial, but I have no idea if it runs correctly.

  11/30
  Worked on optimizations in nominal and sample path.  I removed constants that
  were constantly being checked against in the loops.  I also tried to reduce
  the number of times we checked the end condition, but that caused a large
  performance hit.  I commented it out for now.

  12/3
  Unrolled a loop in negated gradient and moved size to be stored within
  Environment so that it wouldn't be necessary to call obstacles.size()
  repeatedly.  I also adjusted the alignment of variables in Environment 
  to the largest to smallest paradigm.